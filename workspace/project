# 필요한 라이브러리 임포트
import tensorflow as tf
from tensorflow.keras import layers, models, datasets
import matplotlib.pyplot as plt

# 데이터 로드 및 전처리
(x_train, y_train), (x_test, y_test) = datasets.mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0  # 정규화

# CNN 모델 구성
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')
])

# 모델 컴파일
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# 입력 데이터 형태 변경 (CNN 입력 형태에 맞게)
x_train = x_train.reshape((-1, 28, 28, 1))
x_test = x_test.reshape((-1, 28, 28, 1))

# 모델 학습
model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))

# 모델 평가
test_loss, test_acc = model.evaluate(x_test, y_test)
print(f'Test accuracy: {test_acc}')

# 예측 함수 정의
def predict_image(image):
    image = tf.expand_dims(image, axis=0)  # 배치 차원 추가
    image = tf.expand_dims(image, axis=-1)  # 채널 차원 추가
    prediction = model.predict(image)
    return prediction.argmax()

# 예시로 테스트 이미지 한 장 선택하여 예측
image_index = 0  # 테스트할 이미지 인덱스 선택
test_image = x_test[image_index]
predicted_label = predict_image(test_image)

# 결과 출력
plt.imshow(test_image.squeeze(), cmap='gray')
plt.title(f'Predicted: {predicted_label}')
plt.axis('off')
plt.show()
